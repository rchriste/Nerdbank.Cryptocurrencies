<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountIndexOptionDescription" xml:space="preserve">
    <value>The index of the account to create.</value>
  </data>
  <data name="BadSeedPhraseLength" xml:space="preserve">
    <value>The seed phrase length must be at least 24, and a multiple of 3.</value>
  </data>
  <data name="BalanceCommandDescription" xml:space="preserve">
    <value>Reports on balances for each pool.</value>
  </data>
  <data name="BirthdayHeightOptionDescription" xml:space="preserve">
    <value>Forces a particular birthday height to be recorded in the new account. By default this will be the current blockchain length if in online mode.</value>
  </data>
  <data name="HistoryCommandDescription" xml:space="preserve">
    <value>List transactions from the blockchain belonging to this wallet.</value>
  </data>
  <data name="HistoryStartingBlockOptionDescription" xml:space="preserve">
    <value>The first block whose transactions should be included in the transaction list.</value>
  </data>
  <data name="ImportAccountCommandDescription" xml:space="preserve">
    <value>Creates a new account based on a viewing key.</value>
  </data>
  <data name="InvalidAddress" xml:space="preserve">
    <value>Error parsing address: "{address}". {error}</value>
  </data>
  <data name="InvalidSeedPhrase" xml:space="preserve">
    <value>Invalid seed phrase.</value>
  </data>
  <data name="KeyArgumentDescription" xml:space="preserve">
    <value>The viewing key to base the new account on.</value>
  </data>
  <data name="LightServerUrlOptionDescription" xml:space="preserve">
    <value>The URL to the lightwallet server to query for the block chain length for purposes of printing a birthday height. The default varies by whether generating for mainnet or testnet.</value>
  </data>
  <data name="NewAccountCommandDescription" xml:space="preserve">
    <value>Creates a new Zcash account.</value>
  </data>
  <data name="NewAccountWalletPathOptionDescription" xml:space="preserve">
    <value>The path to the wallet file to create.</value>
  </data>
  <data name="NoSyncOption" xml:space="preserve">
    <value>Do not download the latest blocks in the blockchain first. This will speed up the command but may lead it to fail or report stale data.</value>
  </data>
  <data name="NotAUnifiedAddress" xml:space="preserve">
    <value>This is not a unified address.</value>
  </data>
  <data name="OfflineOptionDescription" xml:space="preserve">
    <value>Suppresses all network communication. In particular, this will suppress displaying the birthday height for the new account.</value>
  </data>
  <data name="PasswordOptionDescription" xml:space="preserve">
    <value>A password in addition to the seed phrase that unlocks the account. While any phrase will do, some wallets only accept one word.</value>
  </data>
  <data name="RequestPaymentAmountOptionDescription" xml:space="preserve">
    <value>The amount to request for a particular payment.</value>
  </data>
  <data name="RequestPaymentArgumentCountMismatch" xml:space="preserve">
    <value>The {switchName} switch must have the same number of arguments as the number of payees ({expected}) but had {actual}.</value>
  </data>
  <data name="RequestPaymentCommandDescription" xml:space="preserve">
    <value>Create a payment request URI and optionally a QR code.</value>
  </data>
  <data name="RequestPaymentLabelOptionDescription" xml:space="preserve">
    <value>A human readable label that identifies the receiving address.</value>
  </data>
  <data name="RequestPaymentMemoOptionDescription" xml:space="preserve">
    <value>A memo associated with a particular payment.</value>
  </data>
  <data name="RequestPaymentMessageOptionDescription" xml:space="preserve">
    <value>A human readable message to associated with a particular payment.</value>
  </data>
  <data name="RequestPaymentPayeeArgumentDescription" xml:space="preserve">
    <value>The Zcash address(es) to receive payments.</value>
  </data>
  <data name="RequestPaymentSaveQRCodeOption" xml:space="preserve">
    <value>The path to the image to save with the QR code.</value>
  </data>
  <data name="RootCommandDescription" xml:space="preserve">
    <value>Performs Zcash operations.</value>
  </data>
  <data name="SeedLengthAndSeedPhraseNotAllowed" xml:space="preserve">
    <value>Do not specify both seed phrase and a length for a generated seed phrase.</value>
  </data>
  <data name="SeedPhraseLengthOptionDescription" xml:space="preserve">
    <value>The number of words in the generated seed phrase. Must be 24 or greater, and a multiple of 3.</value>
  </data>
  <data name="SeedPhraseOptionDescription" xml:space="preserve">
    <value>Use a particular seed phrase. Specify one as an argument or a prompt will collect it interactively.</value>
  </data>
  <data name="SeedPhrasePrompt" xml:space="preserve">
    <value>Enter seed phrase:</value>
  </data>
  <data name="SendAmountArgumentDescription" xml:space="preserve">
    <value>The amount to send (in ZEC).</value>
  </data>
  <data name="SendCommandDescription" xml:space="preserve">
    <value>Sends Zcash to a given address.</value>
  </data>
  <data name="SendFeeOptionDescription" xml:space="preserve">
    <value>Overrides the default fee calculation with a specific value (in ZEC).</value>
  </data>
  <data name="SendMemoOptionDescription" xml:space="preserve">
    <value>The memo to include in the transaction.</value>
  </data>
  <data name="SendRecipientArgumentDescription" xml:space="preserve">
    <value>The address to receive funds.</value>
  </data>
  <data name="SyncCommandDescription" xml:space="preserve">
    <value>Downloads transactions from the blockchain.</value>
  </data>
  <data name="TestNetOptionDescription" xml:space="preserve">
    <value>Indicates the account will be used on a testnet instead of mainnet.</value>
  </data>
  <data name="UACommandDescription" xml:space="preserve">
    <value>Encodes or decodes UA addresses.</value>
  </data>
  <data name="UAConstructCommandDescription" xml:space="preserve">
    <value>Constructs a unified address from a set of receivers.</value>
  </data>
  <data name="UAConstructReceiversArgumentDescription" xml:space="preserve">
    <value>Receivers to include in the unified address.</value>
  </data>
  <data name="UAParseArgumentDescription" xml:space="preserve">
    <value>The unified address to be decoded.</value>
  </data>
  <data name="UAParseCommandDescription" xml:space="preserve">
    <value>Parses a UA into its component receiver addresses.</value>
  </data>
  <data name="UnrecognizedKeyFormat" xml:space="preserve">
    <value>This key format is unrecognized.</value>
  </data>
  <data name="WalletPathArgumentDescription" xml:space="preserve">
    <value>The path to the wallet file.</value>
  </data>
</root>