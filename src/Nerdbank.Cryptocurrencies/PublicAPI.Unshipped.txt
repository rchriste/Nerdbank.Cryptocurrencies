#nullable enable
const Nerdbank.Cryptocurrencies.Bip32KeyPath.HardenedBit = 2147483648 -> uint
Nerdbank.Cryptocurrencies.Base58Check
Nerdbank.Cryptocurrencies.Bech32
Nerdbank.Cryptocurrencies.Bech32.Decode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data) -> (int TagLength, int DataLength)
Nerdbank.Cryptocurrencies.Bech32.Encode(System.ReadOnlySpan<char> tag, System.ReadOnlySpan<byte> data, System.Span<char> output) -> int
Nerdbank.Cryptocurrencies.Bech32.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<char> tag, System.Span<byte> data, out Nerdbank.Cryptocurrencies.DecodeError? decodeResult, out string? errorMessage, out (int Tag, int Data) length) -> bool
Nerdbank.Cryptocurrencies.Bip32KeyPath
Nerdbank.Cryptocurrencies.Bip32KeyPath.Append(uint index) -> Nerdbank.Cryptocurrencies.Bip32KeyPath!
Nerdbank.Cryptocurrencies.Bip32KeyPath.Bip32KeyPath(Nerdbank.Cryptocurrencies.Bip32KeyPath! original) -> void
Nerdbank.Cryptocurrencies.Bip32KeyPath.Bip32KeyPath(uint index, Nerdbank.Cryptocurrencies.Bip32KeyPath? parent = null) -> void
Nerdbank.Cryptocurrencies.Bip32KeyPath.CompareTo(Nerdbank.Cryptocurrencies.Bip32KeyPath? other) -> int
Nerdbank.Cryptocurrencies.Bip32KeyPath.Index.get -> uint
Nerdbank.Cryptocurrencies.Bip32KeyPath.IsHardened.get -> bool
Nerdbank.Cryptocurrencies.Bip32KeyPath.IsRooted.get -> bool
Nerdbank.Cryptocurrencies.Bip32KeyPath.Length.get -> uint
Nerdbank.Cryptocurrencies.Bip32KeyPath.Parent.get -> Nerdbank.Cryptocurrencies.Bip32KeyPath?
Nerdbank.Cryptocurrencies.Bip32KeyPath.Steps.get -> System.Collections.Generic.IEnumerable<Nerdbank.Cryptocurrencies.Bip32KeyPath!>!
Nerdbank.Cryptocurrencies.Bip32KeyPath.this[uint level].get -> uint
Nerdbank.Cryptocurrencies.Bip32KeyPath.Truncate(uint length) -> Nerdbank.Cryptocurrencies.Bip32KeyPath!
Nerdbank.Cryptocurrencies.BitUtilities
Nerdbank.Cryptocurrencies.Blake2B
Nerdbank.Cryptocurrencies.Blake2B.Blake2B() -> void
Nerdbank.Cryptocurrencies.Blake2B.Blake2B(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Config
Nerdbank.Cryptocurrencies.Blake2B.Config.Config() -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Key.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Config.OutputSizeInBytes.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Personalization.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.get -> System.ReadOnlySpan<byte>
Nerdbank.Cryptocurrencies.Blake2B.Config.Salt.init -> void
Nerdbank.Cryptocurrencies.Blake2B.Finish(System.Span<byte> finalHash) -> int
Nerdbank.Cryptocurrencies.Blake2B.OutputSizeInBytes.get -> int
Nerdbank.Cryptocurrencies.Blake2B.Reset() -> void
Nerdbank.Cryptocurrencies.Blake2B.Reset(in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> void
Nerdbank.Cryptocurrencies.Blake2B.Update(System.ReadOnlySpan<byte> data) -> void
Nerdbank.Cryptocurrencies.CompactSize
Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadPadding = 4 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BadWordCount = 6 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.BufferTooSmall = 2 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidCharacter = 0 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidChecksum = 1 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidDerivationData = 10 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidKey = 9 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.InvalidWord = 5 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.NoSeparator = 3 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.Other = 14 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.TypeMismatch = 13 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnexpectedLength = 7 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnrecognizedAddressType = 11 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnrecognizedHRP = 12 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodeError.UnrecognizedVersion = 8 -> Nerdbank.Cryptocurrencies.DecodeError
Nerdbank.Cryptocurrencies.DecodingReader
Nerdbank.Cryptocurrencies.DecodingReader.DecodingReader() -> void
Nerdbank.Cryptocurrencies.DecodingReader.DecodingReader(System.ReadOnlyMemory<byte> buffer) -> void
Nerdbank.Cryptocurrencies.DecodingReader.Read(int length) -> System.ReadOnlyMemory<byte>
Nerdbank.Cryptocurrencies.DecodingReader.Read(System.Span<byte> buffer) -> void
Nerdbank.Cryptocurrencies.DecodingReader.ReadByte() -> byte
Nerdbank.Cryptocurrencies.DecodingReader.ReadInt32Compact() -> int
Nerdbank.Cryptocurrencies.DecodingReader.ReadInt64LE() -> long
Nerdbank.Cryptocurrencies.DecodingReader.ReadUInt32LE() -> uint
Nerdbank.Cryptocurrencies.DecodingReader.ReadUInt64Compact() -> ulong
Nerdbank.Cryptocurrencies.DecodingReader.ReadUInt64LE() -> ulong
Nerdbank.Cryptocurrencies.DecodingReader.RemainingLength.get -> int
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.BinanceUSExchange(System.Net.Http.HttpClient! httpClient) -> void
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.GetAvailableTradingPairsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlySet<Nerdbank.Cryptocurrencies.Exchanges.TradingPair>!>
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.GetExchangeRateAsync(Nerdbank.Cryptocurrencies.Exchanges.TradingPair tradingPair, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate>
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.PricesAsOf.get -> System.DateTimeOffset?
Nerdbank.Cryptocurrencies.Exchanges.BinanceUSExchange.RefreshPricesAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task!
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Basis.get -> Nerdbank.Cryptocurrencies.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Basis.set -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Deconstruct(out Nerdbank.Cryptocurrencies.SecurityAmount Basis, out Nerdbank.Cryptocurrencies.SecurityAmount TradeInterest) -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Equals(Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate other) -> bool
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.ExchangeRate() -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.ExchangeRate(Nerdbank.Cryptocurrencies.SecurityAmount Basis, Nerdbank.Cryptocurrencies.SecurityAmount TradeInterest) -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.InBasisAmount.get -> Nerdbank.Cryptocurrencies.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Normalized.get -> Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.OppositeDirection.get -> Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.TradeInterest.get -> Nerdbank.Cryptocurrencies.SecurityAmount
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.TradeInterest.set -> void
Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.TradingPair.get -> Nerdbank.Cryptocurrencies.Exchanges.TradingPair
Nerdbank.Cryptocurrencies.Exchanges.IExchangeRateProvider
Nerdbank.Cryptocurrencies.Exchanges.IExchangeRateProvider.GetExchangeRateAsync(Nerdbank.Cryptocurrencies.Exchanges.TradingPair tradingPair, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate>
Nerdbank.Cryptocurrencies.Exchanges.IHistoricalExchangeRateProvider
Nerdbank.Cryptocurrencies.Exchanges.IHistoricalExchangeRateProvider.GetExchangeRateAsync(Nerdbank.Cryptocurrencies.Exchanges.TradingPair tradingPair, System.DateTimeOffset when, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate>
Nerdbank.Cryptocurrencies.Exchanges.ITradingPairProvider
Nerdbank.Cryptocurrencies.Exchanges.ITradingPairProvider.FindFirstSupportedTradingPairAsync(Nerdbank.Cryptocurrencies.Security! tradeInterest, System.Collections.Generic.IEnumerable<Nerdbank.Cryptocurrencies.Security!>! acceptableBases, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.TradingPair?>
Nerdbank.Cryptocurrencies.Exchanges.ITradingPairProvider.GetAvailableTradingPairsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlySet<Nerdbank.Cryptocurrencies.Exchanges.TradingPair>!>
Nerdbank.Cryptocurrencies.Exchanges.TradingPairEitherOrderEqualityComparer
Nerdbank.Cryptocurrencies.Exchanges.TradingPairEitherOrderEqualityComparer.Equals(Nerdbank.Cryptocurrencies.Exchanges.TradingPair x, Nerdbank.Cryptocurrencies.Exchanges.TradingPair y) -> bool
Nerdbank.Cryptocurrencies.Exchanges.TradingPairEitherOrderEqualityComparer.GetHashCode(Nerdbank.Cryptocurrencies.Exchanges.TradingPair obj) -> int
Nerdbank.Cryptocurrencies.Security
Nerdbank.Cryptocurrencies.Security.Amount(decimal amount) -> Nerdbank.Cryptocurrencies.SecurityAmount
Nerdbank.Cryptocurrencies.Security.Deconstruct(out string! TickerSymbol, out string? Name, out int Precision, out bool IsTestNet) -> void
Nerdbank.Cryptocurrencies.Security.IsTestNet.get -> bool
Nerdbank.Cryptocurrencies.Security.IsTestNet.init -> void
Nerdbank.Cryptocurrencies.Security.Name.get -> string?
Nerdbank.Cryptocurrencies.Security.Name.init -> void
Nerdbank.Cryptocurrencies.Security.Precision.get -> int
Nerdbank.Cryptocurrencies.Security.Precision.init -> void
Nerdbank.Cryptocurrencies.Security.Security(Nerdbank.Cryptocurrencies.Security! original) -> void
Nerdbank.Cryptocurrencies.Security.Security(string! TickerSymbol, string? Name = null, int Precision = 8, bool IsTestNet = false) -> void
Nerdbank.Cryptocurrencies.Security.TickerSymbol.get -> string!
Nerdbank.Cryptocurrencies.Security.TickerSymbol.init -> void
Nerdbank.Cryptocurrencies.SecurityAmount
Nerdbank.Cryptocurrencies.SecurityAmount.Amount.get -> decimal
Nerdbank.Cryptocurrencies.SecurityAmount.Amount.set -> void
Nerdbank.Cryptocurrencies.SecurityAmount.Deconstruct(out decimal Amount, out Nerdbank.Cryptocurrencies.Security! Security) -> void
Nerdbank.Cryptocurrencies.SecurityAmount.Equals(Nerdbank.Cryptocurrencies.SecurityAmount other) -> bool
Nerdbank.Cryptocurrencies.SecurityAmount.RoundedAmount.get -> decimal
Nerdbank.Cryptocurrencies.SecurityAmount.Security.get -> Nerdbank.Cryptocurrencies.Security!
Nerdbank.Cryptocurrencies.SecurityAmount.Security.set -> void
Nerdbank.Cryptocurrencies.SecurityAmount.SecurityAmount() -> void
Nerdbank.Cryptocurrencies.SecurityAmount.SecurityAmount(decimal Amount, Nerdbank.Cryptocurrencies.Security! Security) -> void
Nerdbank.Cryptocurrencies.StableCoins
Nerdbank.Cryptocurrencies.Exchanges.TradingPair
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.Basis.get -> Nerdbank.Cryptocurrencies.Security!
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.Equals(Nerdbank.Cryptocurrencies.Exchanges.TradingPair other) -> bool
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.OppositeDirection.get -> Nerdbank.Cryptocurrencies.Exchanges.TradingPair
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.TradeInterest.get -> Nerdbank.Cryptocurrencies.Security!
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.TradingPair() -> void
Nerdbank.Cryptocurrencies.Exchanges.TradingPair.TradingPair(Nerdbank.Cryptocurrencies.Security! basis, Nerdbank.Cryptocurrencies.Security! tradeInterest) -> void
Nerdbank.Cryptocurrencies.Exchanges.YahooFinance
Nerdbank.Cryptocurrencies.Exchanges.YahooFinance.GetAvailableTradingPairsAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<System.Collections.Generic.IReadOnlySet<Nerdbank.Cryptocurrencies.Exchanges.TradingPair>!>
Nerdbank.Cryptocurrencies.Exchanges.YahooFinance.GetExchangeRateAsync(Nerdbank.Cryptocurrencies.Exchanges.TradingPair tradingPair, System.DateTimeOffset when, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.ValueTask<Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate>
Nerdbank.Cryptocurrencies.Exchanges.YahooFinance.YahooFinance(System.Net.Http.HttpClient! httpClient) -> void
Nerdbank.Cryptocurrencies.IExtendedKey
Nerdbank.Cryptocurrencies.IExtendedKey.ChildIndex.get -> uint
Nerdbank.Cryptocurrencies.IExtendedKey.Depth.get -> byte
Nerdbank.Cryptocurrencies.IExtendedKey.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32KeyPath?
Nerdbank.Cryptocurrencies.IExtendedKey.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.IExtendedKey!
Nerdbank.Cryptocurrencies.IKey
Nerdbank.Cryptocurrencies.IKey.IsTestNet.get -> bool
Nerdbank.Cryptocurrencies.IKeyWithTextEncoding
Nerdbank.Cryptocurrencies.IKeyWithTextEncoding.TextEncoding.get -> string!
Nerdbank.Cryptocurrencies.IKeyWithTextEncoding.TryDecode(string! encoding, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage, out Nerdbank.Cryptocurrencies.IKeyWithTextEncoding? key) -> bool
Nerdbank.Cryptocurrencies.InvalidKeyException
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException() -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException(string? message) -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.InvalidKeyException(string? message, System.Exception? inner) -> void
Nerdbank.Cryptocurrencies.InvalidKeyException.KeyPath.get -> Nerdbank.Cryptocurrencies.Bip32KeyPath?
Nerdbank.Cryptocurrencies.InvalidKeyException.KeyPath.init -> void
override Nerdbank.Cryptocurrencies.Bip32KeyPath.Equals(object? obj) -> bool
override Nerdbank.Cryptocurrencies.Bip32KeyPath.GetHashCode() -> int
override Nerdbank.Cryptocurrencies.Bip32KeyPath.ToString() -> string!
override Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.GetHashCode() -> int
override Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.ToString() -> string!
override Nerdbank.Cryptocurrencies.Security.Equals(object? obj) -> bool
override Nerdbank.Cryptocurrencies.Security.GetHashCode() -> int
override Nerdbank.Cryptocurrencies.Security.ToString() -> string!
override Nerdbank.Cryptocurrencies.SecurityAmount.GetHashCode() -> int
override Nerdbank.Cryptocurrencies.SecurityAmount.ToString() -> string!
override Nerdbank.Cryptocurrencies.Exchanges.TradingPair.GetHashCode() -> int
override Nerdbank.Cryptocurrencies.Exchanges.TradingPair.ToString() -> string!
static Nerdbank.Cryptocurrencies.Base58Check.Decode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes) -> int
static Nerdbank.Cryptocurrencies.Base58Check.Encode(System.ReadOnlySpan<byte> payload, System.Span<char> chars) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxDecodedLength(int charCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.GetMaxEncodedLength(int byteCount) -> int
static Nerdbank.Cryptocurrencies.Base58Check.TryDecode(System.ReadOnlySpan<char> encoded, System.Span<byte> bytes, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage, out int bytesWritten) -> bool
static Nerdbank.Cryptocurrencies.Bech32.GetDecodedLength(System.ReadOnlySpan<char> encoded) -> (int Tag, int Data)?
static Nerdbank.Cryptocurrencies.Bech32.GetEncodedLength(int tagLength, int dataLength) -> int
static Nerdbank.Cryptocurrencies.Bip32KeyPath.operator !=(Nerdbank.Cryptocurrencies.Bip32KeyPath? left, Nerdbank.Cryptocurrencies.Bip32KeyPath? right) -> bool
static Nerdbank.Cryptocurrencies.Bip32KeyPath.operator ==(Nerdbank.Cryptocurrencies.Bip32KeyPath? left, Nerdbank.Cryptocurrencies.Bip32KeyPath? right) -> bool
static Nerdbank.Cryptocurrencies.Bip32KeyPath.Parse(System.ReadOnlySpan<char> path) -> Nerdbank.Cryptocurrencies.Bip32KeyPath!
static Nerdbank.Cryptocurrencies.Bip32KeyPath.TryParse(System.ReadOnlySpan<char> path, out Nerdbank.Cryptocurrencies.Bip32KeyPath? result) -> bool
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt32BE(System.ReadOnlySpan<byte> buffer) -> uint
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt32LE(System.ReadOnlySpan<byte> buffer) -> uint
static Nerdbank.Cryptocurrencies.BitUtilities.ReadUInt64LE(System.ReadOnlySpan<byte> buffer) -> ulong
static Nerdbank.Cryptocurrencies.BitUtilities.WriteBE(uint value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.BitUtilities.WriteLE(uint value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.BitUtilities.WriteLE(ulong value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash) -> int
static Nerdbank.Cryptocurrencies.Blake2B.ComputeHash(System.ReadOnlySpan<byte> data, System.Span<byte> hash, in Nerdbank.Cryptocurrencies.Blake2B.Config config) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Decode(System.ReadOnlySpan<byte> buffer, out ulong value) -> int
static Nerdbank.Cryptocurrencies.CompactSize.Encode(ulong value, System.Span<byte> buffer) -> int
static Nerdbank.Cryptocurrencies.CompactSize.GetEncodedLength(ulong value) -> int
static Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.operator !=(Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate left, Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate right) -> bool
static Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.operator *(Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate rate, decimal factor) -> Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate
static Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.operator *(Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate left, Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate right) -> Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate
static Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.operator *(Nerdbank.Cryptocurrencies.SecurityAmount amount, Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate exchangeRate) -> Nerdbank.Cryptocurrencies.SecurityAmount
static Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.operator ==(Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate left, Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate right) -> bool
static Nerdbank.Cryptocurrencies.Security.operator !=(Nerdbank.Cryptocurrencies.Security? left, Nerdbank.Cryptocurrencies.Security? right) -> bool
static Nerdbank.Cryptocurrencies.Security.operator ==(Nerdbank.Cryptocurrencies.Security? left, Nerdbank.Cryptocurrencies.Security? right) -> bool
static Nerdbank.Cryptocurrencies.Security.WellKnown.get -> System.Collections.Immutable.ImmutableDictionary<string!, Nerdbank.Cryptocurrencies.Security!>!
static Nerdbank.Cryptocurrencies.SecurityAmount.operator !=(Nerdbank.Cryptocurrencies.SecurityAmount left, Nerdbank.Cryptocurrencies.SecurityAmount right) -> bool
static Nerdbank.Cryptocurrencies.SecurityAmount.operator *(decimal left, Nerdbank.Cryptocurrencies.SecurityAmount right) -> Nerdbank.Cryptocurrencies.SecurityAmount
static Nerdbank.Cryptocurrencies.SecurityAmount.operator *(Nerdbank.Cryptocurrencies.SecurityAmount left, decimal right) -> Nerdbank.Cryptocurrencies.SecurityAmount
static Nerdbank.Cryptocurrencies.SecurityAmount.operator +(Nerdbank.Cryptocurrencies.SecurityAmount left, Nerdbank.Cryptocurrencies.SecurityAmount right) -> Nerdbank.Cryptocurrencies.SecurityAmount
static Nerdbank.Cryptocurrencies.SecurityAmount.operator -(Nerdbank.Cryptocurrencies.SecurityAmount left, Nerdbank.Cryptocurrencies.SecurityAmount right) -> Nerdbank.Cryptocurrencies.SecurityAmount
static Nerdbank.Cryptocurrencies.SecurityAmount.operator -(Nerdbank.Cryptocurrencies.SecurityAmount right) -> Nerdbank.Cryptocurrencies.SecurityAmount
static Nerdbank.Cryptocurrencies.SecurityAmount.operator /(Nerdbank.Cryptocurrencies.SecurityAmount left, decimal right) -> Nerdbank.Cryptocurrencies.SecurityAmount
static Nerdbank.Cryptocurrencies.SecurityAmount.operator ==(Nerdbank.Cryptocurrencies.SecurityAmount left, Nerdbank.Cryptocurrencies.SecurityAmount right) -> bool
static Nerdbank.Cryptocurrencies.StableCoins.GetSecuritiesSharingPeg(Nerdbank.Cryptocurrencies.Security! security) -> System.Collections.Generic.IReadOnlySet<Nerdbank.Cryptocurrencies.Security!>!
static Nerdbank.Cryptocurrencies.Exchanges.TradingPair.operator !=(Nerdbank.Cryptocurrencies.Exchanges.TradingPair left, Nerdbank.Cryptocurrencies.Exchanges.TradingPair right) -> bool
static Nerdbank.Cryptocurrencies.Exchanges.TradingPair.operator ==(Nerdbank.Cryptocurrencies.Exchanges.TradingPair left, Nerdbank.Cryptocurrencies.Exchanges.TradingPair right) -> bool
static readonly Nerdbank.Cryptocurrencies.Bech32.Bech32m -> Nerdbank.Cryptocurrencies.Bech32!
static readonly Nerdbank.Cryptocurrencies.Bech32.Original -> Nerdbank.Cryptocurrencies.Bech32!
static readonly Nerdbank.Cryptocurrencies.Bip32KeyPath.Root -> Nerdbank.Cryptocurrencies.Bip32KeyPath!
static readonly Nerdbank.Cryptocurrencies.Exchanges.TradingPairEitherOrderEqualityComparer.Instance -> Nerdbank.Cryptocurrencies.Exchanges.TradingPairEitherOrderEqualityComparer!
static readonly Nerdbank.Cryptocurrencies.Security.ACM -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ADA -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.AEON -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ALGO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ARQ -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ARRR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ATOM -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.AUD -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BAND -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BAT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BBS -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BCH -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BCHA -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BCN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BEAM -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BITC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BKC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BLOC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BNB -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BTC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BTCP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.BUSD -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.CASH -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.CCX -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.CIV -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.COAL -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.COMP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.CUT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.D -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.DAI -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.DASH -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.DERO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.DOGE -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.EGLD -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ENJ -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.EOS -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ERG -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ETC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ETH -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ETN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ETNX -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ETNXP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.EUR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.FBF -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.FIL -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.FLUX -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.GHOST -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.GPKR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.GRFT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.GRIMM -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.GRIN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.GRLC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.HBAR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.HNT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ICX -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.INC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.INTU -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.IOTA -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.IRD -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.KNC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.KNCL -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.KRB -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.LINK -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.LNS -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.LTC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.LTHN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.LUX -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.MANA -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.MAT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.MATIC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.MKR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.MSR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.MWC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.NAH -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.NBR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.NCP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.NEO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.OMB -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.OMG -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ONE -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ONION -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ONT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.OXEN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.OXT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.PAXG -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.PCN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.PIVX -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.PLURA -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.POT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.PRCY -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.PURK -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.QTUM -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.QUAN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.REP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.REPV1 -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.RTO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.RVN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.RYO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.SHB -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.SHIB -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.SIN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.SLD -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.SOL -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.SOLACE -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.STORJ -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.SUMO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.TAZ -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.TRTL -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.TUBE -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.UNI -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.UPX -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.USD -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.USDC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.USDT -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.VEIL -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.VET -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.VTHO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.WAE -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.WAVES -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.WOW -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.WTIP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XAO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XEQ -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XGM -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XGS -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XHV -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XLA -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XLM -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XMC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XMR -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XMV -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XNO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XNV -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XPP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XRN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XRP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XTA -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XTNC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XTZ -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XUN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XUSD -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XVG -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.XWP -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ZANO -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ZEC -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ZEN -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ZIL -> Nerdbank.Cryptocurrencies.Security!
static readonly Nerdbank.Cryptocurrencies.Security.ZRX -> Nerdbank.Cryptocurrencies.Security!
virtual Nerdbank.Cryptocurrencies.Bip32KeyPath.<Clone>$() -> Nerdbank.Cryptocurrencies.Bip32KeyPath!
virtual Nerdbank.Cryptocurrencies.Bip32KeyPath.EqualityContract.get -> System.Type!
virtual Nerdbank.Cryptocurrencies.Bip32KeyPath.Equals(Nerdbank.Cryptocurrencies.Bip32KeyPath? other) -> bool
virtual Nerdbank.Cryptocurrencies.Bip32KeyPath.PrintMembers(System.Text.StringBuilder! builder) -> bool
virtual Nerdbank.Cryptocurrencies.Security.<Clone>$() -> Nerdbank.Cryptocurrencies.Security!
virtual Nerdbank.Cryptocurrencies.Security.EqualityContract.get -> System.Type!
virtual Nerdbank.Cryptocurrencies.Security.Equals(Nerdbank.Cryptocurrencies.Security? other) -> bool
virtual Nerdbank.Cryptocurrencies.Security.PrintMembers(System.Text.StringBuilder! builder) -> bool
~override Nerdbank.Cryptocurrencies.Exchanges.ExchangeRate.Equals(object obj) -> bool
~override Nerdbank.Cryptocurrencies.SecurityAmount.Equals(object obj) -> bool
~override Nerdbank.Cryptocurrencies.Exchanges.TradingPair.Equals(object obj) -> bool
