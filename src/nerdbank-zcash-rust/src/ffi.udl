[Error]
enum LightWalletError {
	"InvalidUri",
	"InvalidHandle",
	"Other",
};

enum ChainType {
	"Testnet",
	"Mainnet",
};

dictionary Config {
	string server_uri;
	ChainType chain_type;
	string data_dir;
	string wallet_name;
	string log_name;
	boolean monitor_mempool;
	u32 minimum_confirmations;
};

dictionary WalletInfo {
	string? ufvk;
	sequence<u8>? unified_spending_key;
	u64 birthday_height;
};

dictionary SyncResult {
	boolean success;
	u64 latest_block;
	u64 total_blocks_synced;
};

dictionary SyncStatus {
	boolean in_progress;
	string? last_error;

	u64 sync_id;
	u64 start_block;
	u64 end_block;

	u64 blocks_done;
	u64 trial_dec_done;
	u64 txn_scan_done;

	u64 blocks_total;

	u64 batch_num;
	u64 batch_total;
};

dictionary Transaction {
	string txid;
	u64 datetime;
	u32 block_height;
	boolean is_incoming;
	u64 spent;
	u64 received;
	f64? price;
	boolean unconfirmed;
	sequence<TransactionSendDetail> sends;
	sequence<SaplingNote> sapling_notes;
	sequence<OrchardNote> orchard_notes;
};

dictionary SaplingNote {
	u64 value;
	sequence<u8> memo;
	boolean is_change;
	sequence<u8> recipient;
};

dictionary OrchardNote {
	u64 value;
	sequence<u8> memo;
	boolean is_change;
	sequence<u8> recipient;
};

dictionary TransactionSendDetail {
	string to_address;
	u64 value;
	string? recipient_ua;
	sequence<u8> memo;
};

dictionary SendUpdate {
	u32 id;
	boolean is_send_in_progress;
	u32 progress;
	u32 total;
	string? last_error;
	string? last_transaction_id;
};

dictionary PoolBalances {
	u64? sapling_balance;
	u64? verified_sapling_balance;
	u64? spendable_sapling_balance;
	u64? unverified_sapling_balance;

	u64? orchard_balance;
	u64? verified_orchard_balance;
	u64? unverified_orchard_balance;
	u64? spendable_orchard_balance;

	u64? transparent_balance;
};

dictionary UserBalances {
    u64 spendable;
    u64 immature_change;
    u64 minimum_fees;
    u64 immature_income;
    u64 dust;
    u64 incoming;
    u64 incoming_dust;
};

namespace LightWallet {
	[Throws=LightWalletError]
	u64 lightwallet_get_block_height(string server_uri);

	[Throws=LightWalletError]
	u64 lightwallet_initialize(Config config, WalletInfo wallet_info);

	[Throws=LightWalletError]
	u64 lightwallet_initialize_from_disk(Config config);

	boolean lightwallet_deinitialize(u64 handle);

	[Throws=LightWalletError]
	SyncResult lightwallet_sync(u64 handle);

	[Throws=LightWalletError]
	void lightwallet_sync_interrupt(u64 handle);

	[Throws=LightWalletError]
	SyncStatus lightwallet_sync_status(u64 handle);

	[Throws=LightWalletError]
	u64 lightwallet_get_birthday_height(u64 handle);

	[Throws=LightWalletError]
	u64 last_synced_height(u64 handle);

	[Throws=LightWalletError]
	sequence<Transaction> lightwallet_get_transactions(u64 handle, u32 starting_block);

	[Throws=LightWalletError]
	string lightwallet_send_to_address(u64 handle, sequence<TransactionSendDetail> send_details);

	[Throws=LightWalletError]
	SendUpdate lightwallet_send_check_status(u64 handle);

	[Throws=LightWalletError]
	PoolBalances lightwallet_get_balances(u64 handle);
	
	[Throws=LightWalletError]
	UserBalances lightwallet_get_user_balances(u64 handle);
};
