#nullable enable
abstract Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.Derive(uint childIndex) -> Nerdbank.Cryptocurrencies.IExtendedKey!
abstract Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.Identifier.get -> System.ReadOnlySpan<byte>
abstract Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.Version.get -> System.ReadOnlySpan<byte>
abstract Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.WriteKeyMaterial(System.Span<byte> destination) -> int
const Nerdbank.Bitcoin.Bip32HDWallet.ChainCode.Length = 32 -> int
const Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint.Length = 4 -> int
const Nerdbank.Bitcoin.Bip44MultiAccountHD.RecommendedAddressGapLimit = 20 -> uint
Nerdbank.Bitcoin.Bip32HDWallet
Nerdbank.Bitcoin.Bip32HDWallet.ChainCode
Nerdbank.Bitcoin.Bip32HDWallet.ChainCode.ChainCode() -> void
Nerdbank.Bitcoin.Bip32HDWallet.ChainCode.ChainCode(System.ReadOnlySpan<byte> value) -> void
Nerdbank.Bitcoin.Bip32HDWallet.ChainCode.Equals(in Nerdbank.Bitcoin.Bip32HDWallet.ChainCode other) -> bool
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.ChainCode.get -> Nerdbank.Bitcoin.Bip32HDWallet.ChainCode
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.ChildIndex.get -> uint
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.DebuggerDisplay.get -> string!
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.Depth.get -> byte
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.DerivationPath.get -> Nerdbank.Cryptocurrencies.Bip32KeyPath?
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.DerivationPath.init -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.ExtendedKeyBase(Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase! copyFrom) -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.IsTestNet.get -> bool
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.ParentFingerprint.get -> Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.TextEncoding.get -> string!
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.WriteBytes(System.Span<byte> destination) -> int
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPrivKey!
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.Dispose() -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(NBitcoin.Secp256k1.ECPrivKey! key, in Nerdbank.Bitcoin.Bip32HDWallet.ChainCode chainCode, bool testNet) -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(NBitcoin.Secp256k1.ECPrivKey! key, in Nerdbank.Bitcoin.Bip32HDWallet.ChainCode chainCode, in Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint parentFingerprint, byte depth, uint childIndex, bool testNet) -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.ExtendedPrivateKey(Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey! copyFrom) -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.Key.get -> Nerdbank.Bitcoin.PrivateKey!
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.PublicKey.get -> Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey!
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPubKey!
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.ExtendedPublicKey(NBitcoin.Secp256k1.ECPubKey! key, in Nerdbank.Bitcoin.Bip32HDWallet.ChainCode chainCode, in Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint parentFingerprint, byte depth, uint childIndex, bool testNet) -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.ExtendedPublicKey(Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey! copyFrom) -> void
Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.Key.get -> Nerdbank.Bitcoin.PublicKey!
Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint
Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint.Equals(in Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint other) -> bool
Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint.ParentFingerprint() -> void
Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint.ParentFingerprint(System.ReadOnlySpan<byte> value) -> void
Nerdbank.Bitcoin.Bip39Mnemonic
Nerdbank.Bitcoin.Bip39Mnemonic.Bip39Mnemonic(System.ReadOnlySpan<byte> entropy, System.ReadOnlyMemory<char> password = default(System.ReadOnlyMemory<char>)) -> void
Nerdbank.Bitcoin.Bip39Mnemonic.Entropy.get -> System.ReadOnlySpan<byte>
Nerdbank.Bitcoin.Bip39Mnemonic.Equals(Nerdbank.Bitcoin.Bip39Mnemonic? other) -> bool
Nerdbank.Bitcoin.Bip39Mnemonic.Password.get -> System.ReadOnlyMemory<char>
Nerdbank.Bitcoin.Bip39Mnemonic.Seed.get -> System.ReadOnlySpan<byte>
Nerdbank.Bitcoin.Bip39Mnemonic.SeedPhrase.get -> string!
Nerdbank.Bitcoin.Bip39Mnemonic.ToString(int words) -> string!
Nerdbank.Bitcoin.Bip44MultiAccountHD
Nerdbank.Bitcoin.Bip44MultiAccountHD.Change
Nerdbank.Bitcoin.Bip44MultiAccountHD.Change.ChangeAddressChain = 1 -> Nerdbank.Bitcoin.Bip44MultiAccountHD.Change
Nerdbank.Bitcoin.Bip44MultiAccountHD.Change.ReceivingAddressChain = 0 -> Nerdbank.Bitcoin.Bip44MultiAccountHD.Change
Nerdbank.Bitcoin.BitcoinP2PKHAddress
Nerdbank.Bitcoin.BitcoinP2PKHAddress.BitcoinP2PKHAddress(NBitcoin.Secp256k1.ECPubKey! pubKey, bool isTestNet) -> void
Nerdbank.Bitcoin.BitcoinP2PKHAddress.IsTestNet.get -> bool
Nerdbank.Bitcoin.BitcoinP2PKHAddress.PublicKeyHash.get -> System.ReadOnlySpan<byte>
Nerdbank.Bitcoin.BitcoinP2PKHAddress.TextEncoding.get -> string!
Nerdbank.Bitcoin.BitcoinUtilities
Nerdbank.Bitcoin.PrivateKey
Nerdbank.Bitcoin.PrivateKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPrivKey!
Nerdbank.Bitcoin.PrivateKey.Dispose() -> void
Nerdbank.Bitcoin.PrivateKey.IsTestNet.get -> bool
Nerdbank.Bitcoin.PrivateKey.P2PKHAddress.get -> Nerdbank.Bitcoin.BitcoinP2PKHAddress!
Nerdbank.Bitcoin.PrivateKey.PrivateKey(NBitcoin.Secp256k1.ECPrivKey! key, bool isTestNet) -> void
Nerdbank.Bitcoin.PrivateKey.PublicKey.get -> Nerdbank.Bitcoin.PublicKey!
Nerdbank.Bitcoin.PrivateKey.TextEncoding.get -> string!
Nerdbank.Bitcoin.PublicKey
Nerdbank.Bitcoin.PublicKey.CryptographicKey.get -> NBitcoin.Secp256k1.ECPubKey!
Nerdbank.Bitcoin.PublicKey.IsTestNet.get -> bool
Nerdbank.Bitcoin.PublicKey.P2PKHAddress.get -> Nerdbank.Bitcoin.BitcoinP2PKHAddress!
Nerdbank.Bitcoin.PublicKey.PublicKey(NBitcoin.Secp256k1.ECPubKey! key, bool isTestNet) -> void
Nerdbank.Bitcoin.RawTransaction
Nerdbank.Bitcoin.RawTransaction.Equals(Nerdbank.Bitcoin.RawTransaction other) -> bool
Nerdbank.Bitcoin.RawTransaction.Outpoint
Nerdbank.Bitcoin.RawTransaction.Outpoint.Equals(Nerdbank.Bitcoin.RawTransaction.Outpoint other) -> bool
Nerdbank.Bitcoin.RawTransaction.Outpoint.Index.get -> uint
Nerdbank.Bitcoin.RawTransaction.Outpoint.Index.init -> void
Nerdbank.Bitcoin.RawTransaction.Outpoint.Outpoint() -> void
Nerdbank.Bitcoin.RawTransaction.Outpoint.Outpoint(System.ReadOnlyMemory<byte> txid, uint index) -> void
Nerdbank.Bitcoin.RawTransaction.Outpoint.Txid.get -> System.ReadOnlyMemory<byte>
Nerdbank.Bitcoin.RawTransaction.RawTransaction() -> void
Nerdbank.Bitcoin.RawTransaction.TxIn
Nerdbank.Bitcoin.RawTransaction.TxIn.Equals(Nerdbank.Bitcoin.RawTransaction.TxIn other) -> bool
Nerdbank.Bitcoin.RawTransaction.TxIn.PreviousOutput.get -> Nerdbank.Bitcoin.RawTransaction.Outpoint?
Nerdbank.Bitcoin.RawTransaction.TxIn.PreviousOutput.init -> void
Nerdbank.Bitcoin.RawTransaction.TxIn.Sequence.get -> uint
Nerdbank.Bitcoin.RawTransaction.TxIn.Sequence.init -> void
Nerdbank.Bitcoin.RawTransaction.TxIn.SignatureScript.get -> System.ReadOnlyMemory<byte>
Nerdbank.Bitcoin.RawTransaction.TxIn.SignatureScript.init -> void
Nerdbank.Bitcoin.RawTransaction.TxIn.TxIn() -> void
Nerdbank.Bitcoin.RawTransaction.TxOut
Nerdbank.Bitcoin.RawTransaction.TxOut.Equals(Nerdbank.Bitcoin.RawTransaction.TxOut other) -> bool
Nerdbank.Bitcoin.RawTransaction.TxOut.Script.get -> System.ReadOnlyMemory<byte>
Nerdbank.Bitcoin.RawTransaction.TxOut.Script.init -> void
Nerdbank.Bitcoin.RawTransaction.TxOut.TxOut() -> void
Nerdbank.Bitcoin.RawTransaction.TxOut.Value.get -> long
Nerdbank.Bitcoin.RawTransaction.TxOut.Value.init -> void
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.ToString() -> string!
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.Derive(uint childIndex) -> Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey!
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.Identifier.get -> System.ReadOnlySpan<byte>
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.Version.get -> System.ReadOnlySpan<byte>
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.WriteKeyMaterial(System.Span<byte> destination) -> int
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.Derive(uint childIndex) -> Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey!
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.Identifier.get -> System.ReadOnlySpan<byte>
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.Version.get -> System.ReadOnlySpan<byte>
override Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPublicKey.WriteKeyMaterial(System.Span<byte> destination) -> int
override Nerdbank.Bitcoin.Bip39Mnemonic.Equals(object? obj) -> bool
override Nerdbank.Bitcoin.Bip39Mnemonic.GetHashCode() -> int
override Nerdbank.Bitcoin.Bip39Mnemonic.ToString() -> string!
override Nerdbank.Bitcoin.BitcoinP2PKHAddress.ToString() -> string!
override Nerdbank.Bitcoin.RawTransaction.GetHashCode() -> int
override Nerdbank.Bitcoin.RawTransaction.Outpoint.GetHashCode() -> int
override Nerdbank.Bitcoin.RawTransaction.TxIn.GetHashCode() -> int
override Nerdbank.Bitcoin.RawTransaction.TxOut.GetHashCode() -> int
static Nerdbank.Bitcoin.Bip32HDWallet.ChainCode.From(System.ReadOnlySpan<byte> value) -> Nerdbank.Bitcoin.Bip32HDWallet.ChainCode
static Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.Decode(System.ReadOnlySpan<char> extendedKeyEncoding) -> Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase!
static Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase.TryDecode(System.ReadOnlySpan<char> encoding, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage, out Nerdbank.Bitcoin.Bip32HDWallet.ExtendedKeyBase? result) -> bool
static Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.Create(Nerdbank.Bitcoin.Bip39Mnemonic! mnemonic, bool testNet = false) -> Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey!
static Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey.Create(System.ReadOnlySpan<byte> seed, bool testNet = false) -> Nerdbank.Bitcoin.Bip32HDWallet.ExtendedPrivateKey!
static Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint.From(System.ReadOnlySpan<byte> value) -> Nerdbank.Bitcoin.Bip32HDWallet.ParentFingerprint
static Nerdbank.Bitcoin.Bip39Mnemonic.Create(int entropyLengthInBits) -> Nerdbank.Bitcoin.Bip39Mnemonic!
static Nerdbank.Bitcoin.Bip39Mnemonic.Create(int entropyLengthInBits, string? password) -> Nerdbank.Bitcoin.Bip39Mnemonic!
static Nerdbank.Bitcoin.Bip39Mnemonic.Create(int entropyLengthInBits, System.ReadOnlyMemory<char> password) -> Nerdbank.Bitcoin.Bip39Mnemonic!
static Nerdbank.Bitcoin.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase) -> Nerdbank.Bitcoin.Bip39Mnemonic!
static Nerdbank.Bitcoin.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase, string? password) -> Nerdbank.Bitcoin.Bip39Mnemonic!
static Nerdbank.Bitcoin.Bip39Mnemonic.Parse(System.ReadOnlySpan<char> seedPhrase, System.ReadOnlyMemory<char> password) -> Nerdbank.Bitcoin.Bip39Mnemonic!
static Nerdbank.Bitcoin.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, out Nerdbank.Bitcoin.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Bitcoin.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, string? password, out Nerdbank.Bitcoin.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Bitcoin.Bip39Mnemonic.TryParse(System.ReadOnlySpan<char> seedPhrase, System.ReadOnlyMemory<char> password, out Nerdbank.Bitcoin.Bip39Mnemonic? mnemonic, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage) -> bool
static Nerdbank.Bitcoin.Bip39Mnemonic.WordsRequiredForEntropyLength(int entropyLengthInBits) -> int
static Nerdbank.Bitcoin.Bip44MultiAccountHD.CreateKeyPath(uint coinType, uint account) -> Nerdbank.Cryptocurrencies.Bip32KeyPath!
static Nerdbank.Bitcoin.Bip44MultiAccountHD.CreateKeyPath(uint coinType, uint account, Nerdbank.Bitcoin.Bip44MultiAccountHD.Change change, uint addressIndex) -> Nerdbank.Cryptocurrencies.Bip32KeyPath!
static Nerdbank.Bitcoin.Bip44MultiAccountHD.DiscoverUsedAccountsAsync(uint coinType, System.Func<Nerdbank.Cryptocurrencies.Bip32KeyPath!, System.Threading.Tasks.ValueTask<bool>>! discover, uint addressGapLimit = 20) -> System.Collections.Generic.IAsyncEnumerable<Nerdbank.Cryptocurrencies.Bip32KeyPath!>!
static Nerdbank.Bitcoin.Bip44MultiAccountHD.DiscoverUsedAddressesAsync(Nerdbank.Cryptocurrencies.Bip32KeyPath! account, System.Func<Nerdbank.Cryptocurrencies.Bip32KeyPath!, System.Threading.Tasks.ValueTask<bool>>! discover, uint addressGapLimit = 20) -> System.Collections.Generic.IAsyncEnumerable<Nerdbank.Cryptocurrencies.Bip32KeyPath!>!
static Nerdbank.Bitcoin.BitcoinP2PKHAddress.TryDecode(string! address, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage, out Nerdbank.Bitcoin.BitcoinP2PKHAddress? bitcoinAddress) -> bool
static Nerdbank.Bitcoin.BitcoinUtilities.Derive<TKey>(this TKey! key, Nerdbank.Cryptocurrencies.Bip32KeyPath! keyPath) -> TKey!
static Nerdbank.Bitcoin.PrivateKey.Encode(System.ReadOnlySpan<byte> privateKey, bool isTestNet) -> string!
static Nerdbank.Bitcoin.PrivateKey.TryDecode(string! encoding, out Nerdbank.Cryptocurrencies.DecodeError? decodeError, out string? errorMessage, out Nerdbank.Bitcoin.PrivateKey? key) -> bool
static Nerdbank.Bitcoin.PublicKey.CreatePublicKeyHash(System.ReadOnlySpan<byte> pubKey, System.Span<byte> destination) -> int
static Nerdbank.Bitcoin.RawTransaction.operator !=(Nerdbank.Bitcoin.RawTransaction left, Nerdbank.Bitcoin.RawTransaction right) -> bool
static Nerdbank.Bitcoin.RawTransaction.operator ==(Nerdbank.Bitcoin.RawTransaction left, Nerdbank.Bitcoin.RawTransaction right) -> bool
static Nerdbank.Bitcoin.RawTransaction.Outpoint.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader) -> Nerdbank.Bitcoin.RawTransaction.Outpoint?
static Nerdbank.Bitcoin.RawTransaction.Outpoint.operator !=(Nerdbank.Bitcoin.RawTransaction.Outpoint left, Nerdbank.Bitcoin.RawTransaction.Outpoint right) -> bool
static Nerdbank.Bitcoin.RawTransaction.Outpoint.operator ==(Nerdbank.Bitcoin.RawTransaction.Outpoint left, Nerdbank.Bitcoin.RawTransaction.Outpoint right) -> bool
static Nerdbank.Bitcoin.RawTransaction.TxIn.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader) -> Nerdbank.Bitcoin.RawTransaction.TxIn
static Nerdbank.Bitcoin.RawTransaction.TxIn.operator !=(Nerdbank.Bitcoin.RawTransaction.TxIn left, Nerdbank.Bitcoin.RawTransaction.TxIn right) -> bool
static Nerdbank.Bitcoin.RawTransaction.TxIn.operator ==(Nerdbank.Bitcoin.RawTransaction.TxIn left, Nerdbank.Bitcoin.RawTransaction.TxIn right) -> bool
static Nerdbank.Bitcoin.RawTransaction.TxOut.Decode(ref Nerdbank.Cryptocurrencies.DecodingReader reader) -> Nerdbank.Bitcoin.RawTransaction.TxOut
static Nerdbank.Bitcoin.RawTransaction.TxOut.operator !=(Nerdbank.Bitcoin.RawTransaction.TxOut left, Nerdbank.Bitcoin.RawTransaction.TxOut right) -> bool
static Nerdbank.Bitcoin.RawTransaction.TxOut.operator ==(Nerdbank.Bitcoin.RawTransaction.TxOut left, Nerdbank.Bitcoin.RawTransaction.TxOut right) -> bool
~override Nerdbank.Bitcoin.RawTransaction.Equals(object obj) -> bool
~override Nerdbank.Bitcoin.RawTransaction.Outpoint.Equals(object obj) -> bool
~override Nerdbank.Bitcoin.RawTransaction.Outpoint.ToString() -> string
~override Nerdbank.Bitcoin.RawTransaction.ToString() -> string
~override Nerdbank.Bitcoin.RawTransaction.TxIn.Equals(object obj) -> bool
~override Nerdbank.Bitcoin.RawTransaction.TxIn.ToString() -> string
~override Nerdbank.Bitcoin.RawTransaction.TxOut.Equals(object obj) -> bool
~override Nerdbank.Bitcoin.RawTransaction.TxOut.ToString() -> string
